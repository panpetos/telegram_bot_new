
import os
import io
import json
import time
import base64
import logging
import re
from uuid import uuid4
from typing import Tuple, List, Dict, Any
import asyncio

import aiohttp
from dotenv import load_dotenv
from PIL import Image, ImageDraw
import numpy as np

from telegram import Update, InputFile, InlineKeyboardButton, InlineKeyboardMarkup, Message
from telegram.ext import Application, MessageHandler, CommandHandler, ContextTypes, filters, CallbackQueryHandler

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –∫–æ–Ω—Ñ–∏–≥ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN", "")
STABILITY_API_KEY = os.getenv("STABILITY_API_KEY", "")
PUBLIC_BASE_URL = os.getenv("PUBLIC_BASE_URL", "https://funfishinggame.store").rstrip("/")
UPLOAD_DIR = "/var/www/funfishinggame.store/html/uploads"

# –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫–∏ (–ª—é–±–æ–π –∏–∑ –Ω–∏—Ö –æ–ø—Ü–∏–æ–Ω–∞–ª–µ–Ω)
DEEPL_API_KEY = os.getenv("DEEPL_API_KEY", "").strip()
DEEPL_API_URL = os.getenv("DEEPL_API_URL", "https://api-free.deepl.com/v2/translate").strip()
LIBRETRANSLATE_URL = os.getenv("LIBRETRANSLATE_URL", "https://libretranslate.com").rstrip("/")
LIBRETRANSLATE_API_KEY = os.getenv("LIBRETRANSLATE_API_KEY", "").strip()

if not BOT_TOKEN or not STABILITY_API_KEY:
    raise SystemExit("BOT_TOKEN –∏/–∏–ª–∏ STABILITY_API_KEY –Ω–µ –∑–∞–¥–∞–Ω—ã –≤ .env")

os.makedirs(UPLOAD_DIR, exist_ok=True)
os.makedirs("references", exist_ok=True)

logging.basicConfig(level=logging.INFO, format="%(asctime)s %(levelname)s %(message)s")
log = logging.getLogger("window_replacement_bot")

REQUEST_TIMEOUT = aiohttp.ClientTimeout(total=180, connect=30)
MAX_IMAGE_DIMENSION = 2048  # –ø–∏–∫—Å–µ–ª–∏
MAX_IMAGE_PAYLOAD = 7 * 1024 * 1024  # ~7 –ú–ë
LAST_IMAGE_URL: dict[int, str] = {}
USER_SESSIONS: dict[int, dict] = {}
CYRILLIC_RE = re.compile(r"[–ê-–Ø–∞-—è–Å—ë]")

# –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –æ–∫–æ–Ω
WINDOW_CATEGORIES = {
    "standard": {
        "name": "üè† –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –æ–∫–Ω–∞",
        "description": "–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–µ –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω—ã–µ –æ–∫–Ω–∞",
        "prompt": "standard rectangular window with white frame"
    },
    "guillotine": {
        "name": "ü™ü –ì–∏–ª—å–æ—Ç–∏–Ω–Ω—ã–µ –æ–∫–Ω–∞", 
        "description": "–û–∫–Ω–∞ —Å –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–º –ø–æ–¥—ä–µ–º–æ–º",
        "prompt": "guillotine sash window with vertical sliding mechanism"
    },
    "frameless": {
        "name": "üî≥ –ë–µ–∑—Ä–∞–º–Ω—ã–µ –æ–∫–Ω–∞",
        "description": "–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –ø–∞–Ω–æ—Ä–∞–º–Ω—ã–µ –æ–∫–Ω–∞ –±–µ–∑ –≤–∏–¥–∏–º—ã—Ö —Ä–∞–º",
        "prompt": "frameless panoramic window with minimal frame"
    },
    "arched": {
        "name": "üèõÔ∏è –ê—Ä–æ—á–Ω—ã–µ –æ–∫–Ω–∞",
        "description": "–û–∫–Ω–∞ —Å –∞—Ä–æ—á–Ω—ã–º –≤–µ—Ä—Ö–æ–º",
        "prompt": "arched window with curved top frame"
    },
    "bay": {
        "name": "üèòÔ∏è –≠—Ä–∫–µ—Ä–Ω—ã–µ –æ–∫–Ω–∞",
        "description": "–í—ã—Å—Ç—É–ø–∞—é—â–∏–µ –º–Ω–æ–≥–æ—Å–µ–∫—Ü–∏–æ–Ω–Ω—ã–µ –æ–∫–Ω–∞",
        "prompt": "bay window with multiple sections protruding from wall"
    },
    "french": {
        "name": "üá´üá∑ –§—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–µ –æ–∫–Ω–∞",
        "description": "–í—ã—Å–æ–∫–∏–µ –æ–∫–Ω–∞-–¥–≤–µ—Ä–∏ –¥–æ –ø–æ–ª–∞",
        "prompt": "french window door extending to floor with glass panels"
    }
}

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ —É—Ç–∏–ª–∏—Ç—ã ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
async def download_bytes(url: str) -> bytes:
    async with aiohttp.ClientSession(timeout=REQUEST_TIMEOUT) as sess:
        async with sess.get(url) as r:
            r.raise_for_status()
            return await r.read()

async def save_tg_file_to_uploads(file_id: str, context: ContextTypes.DEFAULT_TYPE) -> tuple[str, str]:
    f = await context.bot.get_file(file_id)
    tg_url = f.file_path if f.file_path.startswith("http") else f"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEg6u4lEdcUdsrmBZnmKYfynYMcaXnnvgxY_Xm578Xy6JybJvdHLKdF0468L1sKMLinW2ssAxKCH-QKhtFS36N3_38zSYFvexVhLLaK9sr1Z1D0Tis48IhphDVmbjgTqVlVH0o4E3HiVivHU/d/hqdefault.jpg"

    ext = os.path.splitext(f.file_path)[1].lower() or ".jpg"
    name = f"{int(time.time())}_{uuid4().hex}{ext}"
    local_path = os.path.join(UPLOAD_DIR, name)

    data = await download_bytes(tg_url)

    # webp -> png
    if ext == ".webp":
        try:
            im = Image.open(io.BytesIO(data)).convert("RGB")
            buf = io.BytesIO()
            im.save(buf, format="PNG")
            data = buf.getvalue()
            name = name.rsplit(".", 1)[0] + ".png"
            local_path = os.path.join(UPLOAD_DIR, name)
        except Exception:
            pass

    with open(local_path, "wb") as out:
        out.write(data)

    return local_path, f"{PUBLIC_BASE_URL}/uploads/{name}"

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –¥–µ—Ç–µ–∫—Ü–∏—è –æ–∫–æ–Ω ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
class WindowDetector:
    def __init__(self):
        self.model = None
        self._load_model()
    
    def _load_model(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å YOLO –¥–ª—è –¥–µ—Ç–µ–∫—Ü–∏–∏ –æ–∫–æ–Ω"""
        try:
            from ultralytics import YOLO
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–µ–¥–æ–±—É—á–µ–Ω–Ω—É—é –º–æ–¥–µ–ª—å YOLOv8
            self.model = YOLO('yolov8n.pt')
            log.info("–ú–æ–¥–µ–ª—å YOLO –∑–∞–≥—Ä—É–∂–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
        except Exception as e:
            log.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏ YOLO: {e}")
            self.model = None
    
    def detect_windows(self, image_path: str) -> List[Dict[str, Any]]:
        """–î–µ—Ç–µ–∫—Ç–∏—Ä—É–µ—Ç –æ–∫–Ω–∞ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏"""
        if not self.model:
            return self._fallback_detection(image_path)
        
        try:
            # –ó–∞–ø—É—Å–∫–∞–µ–º –¥–µ—Ç–µ–∫—Ü–∏—é
            results = self.model(image_path)
            windows = []
            
            for result in results:
                boxes = result.boxes
                if boxes is not None:
                    for box in boxes:
                        # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –æ–∫–Ω–∞ (–∫–ª–∞—Å—Å –º–æ–∂–µ—Ç –≤–∞—Ä—å–∏—Ä–æ–≤–∞—Ç—å—Å—è)
                        # –í —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–π COCO –º–æ–¥–µ–ª–∏ –Ω–µ—Ç –∫–ª–∞—Å—Å–∞ "window", –ø–æ—ç—Ç–æ–º—É –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback
                        pass
            
            # –ï—Å–ª–∏ YOLO –Ω–µ –Ω–∞—à–ª–∞ –æ–∫–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback
            if not windows:
                return self._fallback_detection(image_path)
                
            return windows
            
        except Exception as e:
            log.error(f"–û—à–∏–±–∫–∞ –¥–µ—Ç–µ–∫—Ü–∏–∏ YOLO: {e}")
            return self._fallback_detection(image_path)
    
    def _fallback_detection(self, image_path: str) -> List[Dict[str, Any]]:
        """–£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –¥–µ—Ç–µ–∫—Ü–∏—è –æ–∫–æ–Ω —Å –ø–æ–º–æ—â—å—é OpenCV"""
        try:
            import cv2
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            img = cv2.imread(image_path)
            if img is None:
                return []
            
            gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
            height, width = gray.shape
            
            # –ü—Ä–æ—Å—Ç–∞—è —ç–≤—Ä–∏—Å—Ç–∏–∫–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω—ã—Ö –æ–±–ª–∞—Å—Ç–µ–π (–æ–∫–æ–Ω)
            # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ä–∞–∑–º—ã—Ç–∏–µ –∏ –ø–æ–∏—Å–∫ –∫–æ–Ω—Ç—É—Ä–æ–≤
            blurred = cv2.GaussianBlur(gray, (5, 5), 0)
            edges = cv2.Canny(blurred, 50, 150)
            
            # –ù–∞—Ö–æ–¥–∏–º –∫–æ–Ω—Ç—É—Ä—ã
            contours, _ = cv2.findContours(edges, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
            
            windows = []
            for contour in contours:
                # –ê–ø–ø—Ä–æ–∫—Å–∏–º–∏—Ä—É–µ–º –∫–æ–Ω—Ç—É—Ä
                epsilon = 0.02 * cv2.arcLength(contour, True)
                approx = cv2.approxPolyDP(contour, epsilon, True)
                
                # –ò—â–µ–º –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω—ã–µ —Ñ–æ—Ä–º—ã
                if len(approx) >= 4:
                    x, y, w, h = cv2.boundingRect(contour)
                    
                    # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ —Ä–∞–∑–º–µ—Ä—É (–æ–∫–Ω–∞ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–æ–ª—å—à–∏–º–∏)
                    if w > width * 0.05 and h > height * 0.05 and w < width * 0.8 and h < height * 0.8:
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω (–æ–∫–Ω–∞ –æ–±—ã—á–Ω–æ –≤—ã—Ç—è–Ω—É—Ç—ã –ø–æ –≤–µ—Ä—Ç–∏–∫–∞–ª–∏ –∏–ª–∏ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª–∏)
                        aspect_ratio = w / h
                        if 0.3 < aspect_ratio < 3.0:
                            windows.append({
                                'bbox': [x, y, w, h],
                                'confidence': 0.7,  # –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –¥–ª—è fallback
                                'area': w * h
                            })
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ø–ª–æ—â–∞–¥–∏ (–±–æ–ª—å—à–∏–µ –æ–∫–Ω–∞ —Å–Ω–∞—á–∞–ª–∞)
            windows.sort(key=lambda x: x['area'], reverse=True)
            
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –æ–∫–æ–Ω
            return windows[:10]
            
        except Exception as e:
            log.error(f"–û—à–∏–±–∫–∞ fallback –¥–µ—Ç–µ–∫—Ü–∏–∏: {e}")
            return []

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π –¥–µ—Ç–µ–∫—Ç–æ—Ä
window_detector = WindowDetector()

def create_window_mask(image_path: str, windows: List[Dict[str, Any]]) -> Image.Image:
    """–°–æ–∑–¥–∞–µ—Ç –º–∞—Å–∫—É –¥–ª—è –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –æ–∫–æ–Ω"""
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–æ–≤
        with Image.open(image_path) as img:
            width, height = img.size
        
        # –°–æ–∑–¥–∞–µ–º –º–∞—Å–∫—É
        mask = Image.new('L', (width, height), 0)
        draw = ImageDraw.Draw(mask)
        
        # –†–∏—Å—É–µ–º –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –æ–∫–Ω–∞
        for window in windows:
            bbox = window['bbox']
            x, y, w, h = bbox
            # –†–∏—Å—É–µ–º –±–µ–ª—ã–π –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫ (255) –Ω–∞ —á–µ—Ä–Ω–æ–º —Ñ–æ–Ω–µ (0)
            draw.rectangle([x, y, x + w, y + h], fill=255)
        
        return mask
        
    except Exception as e:
        log.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –º–∞—Å–∫–∏: {e}")
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç—É—é –º–∞—Å–∫—É
        return Image.new('L', (512, 512), 0)

async def call_stability_inpaint(image_bytes: bytes, mask_png: bytes, prompt: str) -> bytes:
    """–í—ã–∑–æ–≤ Stability API –¥–ª—è –∑–∞–º–µ–Ω—ã –æ–∫–æ–Ω"""
    url = "https://api.stability.ai/v2beta/stable-image/edit/inpaint"
    headers = {"Authorization": f"Bearer {STABILITY_API_KEY}", "Accept": "image/*"}

    form = aiohttp.FormData()
    form.add_field("image", image_bytes, filename="image.png", content_type="image/png")
    form.add_field("mask",  mask_png,   filename="mask.png",  content_type="image/png")
    if prompt.strip():
        form.add_field("prompt", prompt.strip())
    form.add_field("output_format", "png")

    async with aiohttp.ClientSession(timeout=REQUEST_TIMEOUT) as sess:
        async with sess.post(url, headers=headers, data=form) as resp:
            if resp.status == 413:
                raise RuntimeError(
                    "Stability API –≤–µ—Ä–Ω—É–ª 413 (—Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π –∑–∞–ø—Ä–æ—Å). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –º–µ–Ω—å—à–µ–≥–æ —Ä–∞–∑–º–µ—Ä–∞."
                )
            if resp.status != 200:
                txt = await resp.text()
                raise RuntimeError(f"–û—à–∏–±–∫–∞ Stability API: {resp.status} {txt}")
            ctype = resp.headers.get("Content-Type", "")
            if "image/" not in ctype:
                txt = await resp.text()
                raise RuntimeError(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π content-type: {ctype} | —Ç–µ–ª–æ: {txt[:400]}")
        return await resp.read()


def _resize_image_and_mask(
    image: Image.Image,
    mask: Image.Image,
    scale: float,
) -> tuple[Image.Image, Image.Image]:
    """–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ –º–∞—Å–∫–∏."""

    if scale >= 0.999:
        return image, mask

    new_size = (max(1, int(image.width * scale)), max(1, int(image.height * scale)))
    resized_image = image.resize(new_size, Image.LANCZOS)
    resized_mask = mask.resize(new_size, Image.NEAREST)
    return resized_image, resized_mask


def prepare_inpaint_payload(
    image_path: str,
    mask: Image.Image,
    max_dimension: int = MAX_IMAGE_DIMENSION,
    max_bytes: int = MAX_IMAGE_PAYLOAD,
) -> tuple[bytes, bytes]:
    """
    –ü—Ä–∏–≤–æ–¥–∏—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏ –º–∞—Å–∫—É –∫ –ø—Ä–∏–µ–º–ª–µ–º–æ–º—É —Ä–∞–∑–º–µ—Ä—É –¥–ª—è Stability API.

    API –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç 413 –ø—Ä–∏ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∏—Ö payload'–∞—Ö. –ú—ã —É–º–µ–Ω—å—à–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏ –º–∞—Å–∫—É,
    —Å–æ—Ö—Ä–∞–Ω—è—è –ø—Ä–æ–ø–æ—Ä—Ü–∏–∏, –ø–æ–∫–∞ —Ä–∞–∑–º–µ—Ä PNG –Ω–µ —Å—Ç–∞–Ω–µ—Ç –ø—Ä–∏–µ–º–ª–µ–º—ã–º.
    """

    with Image.open(image_path) as src:
        image = src.convert("RGB")

    mask = mask.convert("L")

    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Å—Ç–æ—Ä–æ–Ω—É
    longest_side = max(image.width, image.height)
    if longest_side > max_dimension:
        scale = max_dimension / float(longest_side)
        image, mask = _resize_image_and_mask(image, mask, scale)

    def encode(img: Image.Image, mk: Image.Image) -> tuple[bytes, bytes]:
        img_buf = io.BytesIO()
        img.save(img_buf, format="PNG", optimize=True)
        mask_buf = io.BytesIO()
        mk.save(mask_buf, format="PNG")
        return img_buf.getvalue(), mask_buf.getvalue()

    image_bytes, mask_bytes = encode(image, mask)

    # –ï—Å–ª–∏ –≤—Å–µ –µ—â–µ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π payload, —É–º–µ–Ω—å—à–∞–µ–º –ø–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ
    while len(image_bytes) + len(mask_bytes) > max_bytes and min(image.width, image.height) > 512:
        image, mask = _resize_image_and_mask(image, mask, 0.85)
        image_bytes, mask_bytes = encode(image, mask)

    return image_bytes, mask_bytes

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –ø–µ—Ä–µ–≤–æ–¥ RU‚ÜíEN ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
async def translate_ru_to_en(text: str) -> tuple[str, str | None]:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (–ø–µ—Ä–µ–≤–æ–¥, –ø—Ä–æ–≤–∞–π–¥–µ—Ä) –ª–∏–±–æ (–∏—Å—Ö–æ–¥–Ω—ã–π, None) –µ—Å–ª–∏ –ø–µ—Ä–µ–≤–æ–¥–∞ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è/–Ω–µ –≤—ã—à–ª–æ.
    """
    if not text or not CYRILLIC_RE.search(text):
        return text, None

    # 1) DeepL (–µ—Å–ª–∏ –µ—Å—Ç—å –∫–ª—é—á)
    if DEEPL_API_KEY:
        try:
            headers = {"Authorization": f"DeepL-Auth-Key {DEEPL_API_KEY}"}
            data = aiohttp.FormData()
            data.add_field("text", text)
            data.add_field("target_lang", "EN")
            data.add_field("source_lang", "RU")
            async with aiohttp.ClientSession(timeout=REQUEST_TIMEOUT) as sess:
                async with sess.post(DEEPL_API_URL, headers=headers, data=data) as r:
                    if r.status == 200:
                        j = await r.json()
                        tr = j.get("translations", [{}])[0].get("text")
                        if tr:
                            return tr, "deepl"
                    else:
                        log.warning("–û—à–∏–±–∫–∞ DeepL %s: %s", r.status, await r.text())
        except Exception as e:
            log.warning("–ò—Å–∫–ª—é—á–µ–Ω–∏–µ DeepL: %s", e)

    # 2) LibreTranslate (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø—É–±–ª–∏—á–Ω—ã–π –∏–Ω—Å—Ç–∞–Ω—Å)
    try:
        url = f"{LIBRETRANSLATE_URL}/translate"
        payload = {"q": text, "source": "ru", "target": "en", "format": "text"}
        if LIBRETRANSLATE_API_KEY:
            payload["api_key"] = LIBRETRANSLATE_API_KEY
        async with aiohttp.ClientSession(timeout=REQUEST_TIMEOUT) as sess:
            async with sess.post(url, json=payload) as r:
                if r.status == 200:
                    j = await r.json()
                    tr = j.get("translatedText")
                    if tr:
                        return tr, "libre"
                else:
                    log.warning("–û—à–∏–±–∫–∞ LibreTranslate %s: %s", r.status, await r.text())
    except Exception as e:
        log.warning("–ò—Å–∫–ª—é—á–µ–Ω–∏–µ LibreTranslate: %s", e)

    # –µ—Å–ª–∏ –≤—Å—ë –º–∏–º–æ ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Å—Ö–æ–¥–Ω–∏–∫
    return text, None

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ —Ö–µ–Ω–¥–ª–µ—Ä—ã ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
async def start_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    welcome_text = """üè† –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –¥–ª—è –∑–∞–º–µ–Ω—ã –æ–∫–æ–Ω –Ω–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è—Ö –¥–æ–º–æ–≤!

ü§ñ –ß—Ç–æ —è —É–º–µ—é:
‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞—Ö–æ–¥–∏—Ç—å –æ–∫–Ω–∞ –Ω–∞ —Ñ–æ—Ç–æ –¥–æ–º–∞
‚Ä¢ –ó–∞–º–µ–Ω—è—Ç—å –∏—Ö –Ω–∞ –æ–∫–Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
‚Ä¢ –†–∞–±–æ—Ç–∞—Ç—å —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã–º–∏ —Å—Ç–∏–ª—è–º–∏

üìã –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:
1. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Ñ–æ—Ç–æ –¥–æ–º–∞
2. –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –æ–∫–æ–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö
3. –ü–æ–ª—É—á–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å –∑–∞–º–µ–Ω–µ–Ω–Ω—ã–º–∏ –æ–∫–Ω–∞–º–∏

–ù–∞—á–Ω–∏—Ç–µ —Å –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –¥–æ–º–∞! üì∏"""
    
    await update.message.reply_text(welcome_text)

async def help_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    help_text = """üìñ –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞:

üîπ /start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
üîπ /help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É
üîπ /ping - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–∞–±–æ—Ç—É –±–æ—Ç–∞

üè† –ö–∞–∫ –∑–∞–º–µ–Ω–∏—Ç—å –æ–∫–Ω–∞:
1Ô∏è‚É£ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –¥–æ–º–∞ –±–æ—Ç—É
2Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –æ–∫–æ–Ω –∏–∑ —Å–ø–∏—Å–∫–∞
3Ô∏è‚É£ –î–æ–∂–¥–∏—Ç–µ—Å—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
4Ô∏è‚É£ –ü–æ–ª—É—á–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç

ü™ü –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –æ–∫–æ–Ω:
‚Ä¢ –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –æ–∫–Ω–∞
‚Ä¢ –ì–∏–ª—å–æ—Ç–∏–Ω–Ω—ã–µ –æ–∫–Ω–∞  
‚Ä¢ –ë–µ–∑—Ä–∞–º–Ω—ã–µ –æ–∫–Ω–∞
‚Ä¢ –ê—Ä–æ—á–Ω—ã–µ –æ–∫–Ω–∞
‚Ä¢ –≠—Ä–∫–µ—Ä–Ω—ã–µ –æ–∫–Ω–∞
‚Ä¢ –§—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–µ –æ–∫–Ω–∞

üí° –°–æ–≤–µ—Ç—ã:
‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —á–µ—Ç–∫–∏–µ —Ñ–æ—Ç–æ —Ñ–∞—Å–∞–¥–æ–≤ –∑–¥–∞–Ω–∏–π
‚Ä¢ –õ—É—á—à–µ –≤—Å–µ–≥–æ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å —Ñ—Ä–æ–Ω—Ç–∞–ª—å–Ω—ã–º–∏ –≤–∏–¥–∞–º–∏
‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ñ–æ—Ä–º–∞—Ç—ã: JPG, PNG, WebP
‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: 20 –ú–ë"""
    
    await update.message.reply_text(help_text)

async def ping_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üü¢ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ!")

def create_window_categories_keyboard():
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏ –æ–∫–æ–Ω"""
    keyboard = []
    for key, category in WINDOW_CATEGORIES.items():
        keyboard.append([InlineKeyboardButton(
            category["name"], 
            callback_data=f"window_category:{key}"
        )])
    
    keyboard.append([InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")])
    return InlineKeyboardMarkup(keyboard)

async def got_image(update: Update, context: ContextTypes.DEFAULT_TYPE):
    msg = update.message
    user_id = update.effective_user.id
    
    if msg.photo:
        file_id = msg.photo[-1].file_id
    else:
        if not (msg.document and msg.document.mime_type and msg.document.mime_type.startswith("image/")):
            await msg.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–æ–º–∞ –≤ –≤–∏–¥–µ —Ñ–æ—Ç–æ –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞.")
            return
        file_id = msg.document.file_id

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
    loading_msg = await msg.reply_text("‚è≥ –ó–∞–≥—Ä—É–∂–∞—é –∏ –∞–Ω–∞–ª–∏–∑–∏—Ä—É—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ...")

    try:
        local_path, public_url = await save_tg_file_to_uploads(file_id, context)
        LAST_IMAGE_URL[user_id] = public_url
        
        # –î–µ—Ç–µ–∫—Ç–∏—Ä—É–µ–º –æ–∫–Ω–∞
        windows = window_detector.detect_windows(local_path)
        
        if not windows:
            await loading_msg.edit_text("‚ùå –ù–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –æ–∫–æ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ —Ñ–∞—Å–∞–¥–∞ –∑–¥–∞–Ω–∏—è —Å —á–µ—Ç–∫–æ –≤–∏–¥–∏–º—ã–º–∏ –æ–∫–Ω–∞–º–∏.")
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Å—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        USER_SESSIONS[user_id] = {
            'image_path': local_path,
            'image_url': public_url,
            'windows': windows,
            'timestamp': time.time()
        }
        
        log.info(f"–ù–∞–π–¥–µ–Ω–æ {len(windows)} –æ–∫–æ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        
        await loading_msg.edit_text(
            f"‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ!\n\n"
            f"üîç –ù–∞–π–¥–µ–Ω–æ –æ–∫–æ–Ω: {len(windows)}\n\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –æ–∫–æ–Ω –¥–ª—è –∑–∞–º–µ–Ω—ã:",
            reply_markup=create_window_categories_keyboard()
        )
        
    except Exception as e:
        log.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: %s", e)
        await loading_msg.edit_text(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {str(e)}")

async def handle_window_category(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –æ–∫–æ–Ω"""
    query = update.callback_query
    await query.answer()
    
    user_id = update.effective_user.id
    
    if query.data == "cancel":
        await query.edit_message_text("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
        return
    
    if not query.data.startswith("window_category:"):
        return
    
    category_key = query.data.split(":", 1)[1]
    
    if category_key not in WINDOW_CATEGORIES:
        await query.edit_message_text("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è –æ–∫–æ–Ω.")
        return
    
    if user_id not in USER_SESSIONS:
        await query.edit_message_text("‚ùå –°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–Ω–æ–≤–æ.")
        return
    
    session = USER_SESSIONS[user_id]
    category = WINDOW_CATEGORIES[category_key]
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –æ–±—Ä–∞–±–æ—Ç–∫–∏
    await query.edit_message_text(
        f"üé® –ó–∞–º–µ–Ω—è—é –æ–∫–Ω–∞ –Ω–∞ {category['name'].lower()}...\n\n"
        f"‚è≥ –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –¥–æ 2 –º–∏–Ω—É—Ç, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–¥–æ–∂–¥–∏—Ç–µ."
    )
    
    try:
        # –°–æ–∑–¥–∞–µ–º –º–∞—Å–∫—É –¥–ª—è –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –æ–∫–æ–Ω
        mask = create_window_mask(session['image_path'], session['windows'])

        # –ì–æ—Ç–æ–≤–∏–º payload –¥–ª—è Stability API (—É—á–∏—Ç—ã–≤–∞—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞)
        image_bytes, mask_bytes = prepare_inpaint_payload(session['image_path'], mask)
        
        # –ü–µ—Ä–µ–≤–æ–¥–∏–º –ø—Ä–æ–º–ø—Ç
        prompt = category['prompt']
        translated_prompt, provider = await translate_ru_to_en(prompt)
        if provider and translated_prompt:
            prompt = translated_prompt
        
        # –í—ã–∑—ã–≤–∞–µ–º Stability API
        result_png = await call_stability_inpaint(image_bytes, mask_bytes, prompt)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        caption = f"‚ú® –ì–æ—Ç–æ–≤–æ! –û–∫–Ω–∞ –∑–∞–º–µ–Ω–µ–Ω—ã –Ω–∞ {category['name'].lower()}\n\n"
        caption += f"üìù –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category['description']}\n"
        caption += f"üîç –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –æ–∫–æ–Ω: {len(session['windows'])}"
        
        await context.bot.send_photo(
            chat_id=query.message.chat_id,
            photo=InputFile(io.BytesIO(result_png), filename="result.png"),
            caption=caption
        )
        
        # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –¥—Ä—É–≥—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
        await context.bot.send_message(
            chat_id=query.message.chat_id,
            text="üîÑ –•–æ—Ç–∏—Ç–µ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –¥—Ä—É–≥—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –æ–∫–æ–Ω –¥–ª—è —ç—Ç–æ–≥–æ –∂–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è?",
            reply_markup=create_window_categories_keyboard()
        )
        
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–º
        try:
            await query.message.delete()
        except:
            pass
            
    except Exception as e:
        log.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–º–µ–Ω–µ –æ–∫–æ–Ω: {e}")
        await query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ: {str(e)}")

async def handle_text_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    text = update.message.text.lower()
    
    if any(word in text for word in ["–ø—Ä–∏–≤–µ—Ç", "hello", "hi", "—Å—Ç–∞—Ä—Ç"]):
        await start_cmd(update, context)
    elif any(word in text for word in ["–ø–æ–º–æ—â—å", "—Å–ø—Ä–∞–≤–∫–∞", "help"]):
        await help_cmd(update, context)
    elif any(word in text for word in ["–ø–∏–Ω–≥", "ping", "—Ä–∞–±–æ—Ç–∞–µ—Ç"]):
        await ping_cmd(update, context)
    else:
        help_text = """‚ùì –Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.

üè† –û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Ñ–æ—Ç–æ –¥–æ–º–∞ –¥–ª—è –∑–∞–º–µ–Ω—ã –æ–∫–æ–Ω –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã:
‚Ä¢ /start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É
‚Ä¢ /help - –°–ø—Ä–∞–≤–∫–∞  
‚Ä¢ /ping - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–∞–±–æ—Ç—É –±–æ—Ç–∞"""
        await update.message.reply_text(help_text)

async def log_every_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    msg = getattr(update, "message", None)
    if not msg:
        return
    t = (msg.text or "")[:80]
    log.info("[–ø–æ–ª—É—á–µ–Ω–æ] —á–∞—Ç=%s –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å=%s —Ç–µ–∫—Å—Ç=%s", msg.chat_id, update.effective_user.id, t)

async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE) -> None:
    log.exception("–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞", exc_info=context.error)

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –∑–∞–ø—É—Å–∫ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def main():
    app = Application.builder().token(BOT_TOKEN).build()

    # –ö–æ–º–∞–Ω–¥—ã
    app.add_handler(CommandHandler("start", start_cmd))
    app.add_handler(CommandHandler("help", help_cmd))
    app.add_handler(CommandHandler("ping", ping_cmd))

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ callback –∑–∞–ø—Ä–æ—Å–æ–≤ (–∫–Ω–æ–ø–∫–∏)
    app.add_handler(CallbackQueryHandler(handle_window_category))
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    app.add_handler(MessageHandler(filters.PHOTO | filters.Document.IMAGE, got_image))
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text_message))
    
    # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    app.add_handler(MessageHandler(filters.ALL, log_every_message))

    app.add_error_handler(error_handler)

    log.info("üöÄ –ë–æ—Ç –¥–ª—è –∑–∞–º–µ–Ω—ã –æ–∫–æ–Ω –∑–∞–ø—É—â–µ–Ω")
    app.run_polling(allowed_updates=None, drop_pending_updates=False)

    print("‚úÖ Bot updated via GitHub Actions")


if __name__ == "__main__":
    main()
